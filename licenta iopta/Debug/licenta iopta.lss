
licenta iopta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800060  00800060  0000081c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000411  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000169  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002f3  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003c4  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000026c  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000080a  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 37       	cpi	r26, 0x7D	; 125
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 13 03 	call	0x626	; 0x626 <main>
  74:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_14>:
void stopConversion(void);
void startConversion(char);

void initArray(char );

ISR(ADC_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	00 90 5f 00 	lds	r0, 0x005F
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	2f 93       	push	r18
  8a:	3f 93       	push	r19
  8c:	4f 93       	push	r20
  8e:	5f 93       	push	r21
  90:	6f 93       	push	r22
  92:	7f 93       	push	r23
  94:	8f 93       	push	r24
  96:	9f 93       	push	r25
  98:	af 93       	push	r26
  9a:	bf 93       	push	r27
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	startFlag = 1 ; 
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 62 00 	sts	0x0062, r24
	adcConversion();
  ae:	0e 94 2b 01 	call	0x256	; 0x256 <adcConversion>
	UDR = 0xFC;	
  b2:	8c e2       	ldi	r24, 0x2C	; 44
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2c ef       	ldi	r18, 0xFC	; 252
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
}
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	ff 91       	pop	r31
  c2:	ef 91       	pop	r30
  c4:	bf 91       	pop	r27
  c6:	af 91       	pop	r26
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	7f 91       	pop	r23
  ce:	6f 91       	pop	r22
  d0:	5f 91       	pop	r21
  d2:	4f 91       	pop	r20
  d4:	3f 91       	pop	r19
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	00 92 5f 00 	sts	0x005F, r0
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_9>:

ISR(TIMER0_OVF_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	00 90 5f 00 	lds	r0, 0x005F
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
	//
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	0f 90       	pop	r0
  fe:	00 92 5f 00 	sts	0x005F, r0
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_1>:

ISR(INT0_vect){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	00 90 5f 00 	lds	r0, 0x005F
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0xFF;
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	//send();
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	00 92 5f 00 	sts	0x005F, r0
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_2>:

ISR(INT1_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	00 90 5f 00 	lds	r0, 0x005F
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	PORTB = 0x00;
 166:	88 e3       	ldi	r24, 0x38	; 56
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	10 82       	st	Z, r1
	counter = 0 ;
 16e:	10 92 61 00 	sts	0x0061, r1
 172:	10 92 60 00 	sts	0x0060, r1
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	00 92 5f 00 	sts	0x005F, r0
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_13>:

ISR(USART_TXC_vect){
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	00 90 5f 00 	lds	r0, 0x005F
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	send();
 1ba:	0e 94 b7 02 	call	0x56e	; 0x56e <send>
	//char temp = UDR ; 
	//UDR = temp ; 
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	00 92 5f 00 	sts	0x005F, r0
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_11>:

ISR(USART_RXC_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	00 90 5f 00 	lds	r0, 0x005F
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	PORTA = UDR ; 
 212:	8b e3       	ldi	r24, 0x3B	; 59
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	2c e2       	ldi	r18, 0x2C	; 44
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	f9 01       	movw	r30, r18
 21c:	20 81       	ld	r18, Z
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
	receiveArray(UDR);
 222:	8c e2       	ldi	r24, 0x2C	; 44
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	0e 94 9e 01 	call	0x33c	; 0x33c <receiveArray>
	//char temp = UDR ; 
	//UDR  = temp ; 
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	00 92 5f 00 	sts	0x005F, r0
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <adcConversion>:
char acdConverted = 0; 
void adcConversion(void){	
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <adcConversion+0x6>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0XFF;
 260:	84 e3       	ldi	r24, 0x34	; 52
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
	if(startFlag == 1){
 26a:	80 91 62 00 	lds	r24, 0x0062
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	09 f0       	breq	.+2      	; 0x274 <adcConversion+0x1e>
 272:	41 c0       	rjmp	.+130    	; 0x2f6 <adcConversion+0xa0>
		PORTC=0b11111110;
 274:	85 e3       	ldi	r24, 0x35	; 53
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	2e ef       	ldi	r18, 0xFE	; 254
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
		acdConverted = 1 ;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 76 00 	sts	0x0076, r24
		lowerBit  = ADCL ;
 284:	84 e2       	ldi	r24, 0x24	; 36
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	80 93 64 00 	sts	0x0064, r24
		higgerBit = ADCH;
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	80 93 63 00 	sts	0x0063, r24
		
		int crc = lowerBit + higgerBit + inCommingArray[IN_CMD_POS] + OUT_COMMING_ARRAY_LENGTH  ;		
 29c:	80 91 64 00 	lds	r24, 0x0064
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	80 91 63 00 	lds	r24, 0x0063
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	28 0f       	add	r18, r24
 2ae:	39 1f       	adc	r19, r25
 2b0:	80 91 68 00 	lds	r24, 0x0068
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	82 0f       	add	r24, r18
 2ba:	93 1f       	adc	r25, r19
 2bc:	0a 96       	adiw	r24, 0x0a	; 10
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
		
		outCommingArray [OUT_CMD_POS ] = inCommingArray[IN_CMD_POS] ;
 2c2:	80 91 68 00 	lds	r24, 0x0068
 2c6:	80 93 6f 00 	sts	0x006F, r24
		outCommingArray [OUT_BIT0_POS] = lowerBit ;
 2ca:	80 91 64 00 	lds	r24, 0x0064
 2ce:	80 93 70 00 	sts	0x0070, r24
		outCommingArray [OUT_BIT1_POS] = higgerBit ;
 2d2:	80 91 63 00 	lds	r24, 0x0063
 2d6:	80 93 71 00 	sts	0x0071, r24
		outCommingArray [OUT_CRCH_POS] = (char) crc >> 8 ;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	89 2f       	mov	r24, r25
 2e2:	99 0f       	add	r25, r25
 2e4:	99 0b       	sbc	r25, r25
 2e6:	80 93 73 00 	sts	0x0073, r24
		outCommingArray [OUT_CRCL_POS] = (char) crc ;
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	80 93 72 00 	sts	0x0072, r24
		
		send();
 2f0:	0e 94 b7 02 	call	0x56e	; 0x56e <send>
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <adcConversion+0xaa>
	} else {
		PORTC=0b00000001;
 2f6:	85 e3       	ldi	r24, 0x35	; 53
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
	}
}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <initArray>:

void initArray(char array){
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	89 83       	std	Y+1, r24	; 0x01
	//if(array == OUT_COMMING_ARRAY_ALIAS ){
		outCommingArray [OUT_LENGTH_BIT_POS] = OUT_COMMING_ARRAY_LENGTH ;
 316:	8a e0       	ldi	r24, 0x0A	; 10
 318:	80 93 6e 00 	sts	0x006E, r24
		outCommingArray [OUT_STX1_POS]  = STX ; 
 31c:	80 e3       	ldi	r24, 0x30	; 48
 31e:	80 93 6c 00 	sts	0x006C, r24
		outCommingArray [OUT_STX2_POS]  = STX ; 
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	80 93 6d 00 	sts	0x006D, r24
		outCommingArray [OUT_ETX1_POS]  = ETX ; 
 328:	81 e3       	ldi	r24, 0x31	; 49
 32a:	80 93 74 00 	sts	0x0074, r24
		outCommingArray [OUT_ETX2_POS]  = ETX ; 
 32e:	81 e3       	ldi	r24, 0x31	; 49
 330:	80 93 75 00 	sts	0x0075, r24
	//} 
}
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <receiveArray>:

char consecutiveCounter = 0; 
char consecutiveCounterBuffer = 0 ;


void receiveArray(char bit){
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	00 d0       	rcall	.+0      	; 0x342 <receiveArray+0x6>
 342:	00 d0       	rcall	.+0      	; 0x344 <receiveArray+0x8>
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	8c 83       	std	Y+4, r24	; 0x04
	
	consecutiveCounter ++ ; 
 34a:	80 91 7b 00 	lds	r24, 0x007B
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	80 93 7b 00 	sts	0x007B, r24
	PORTC = inCommingArray[IN_CMD_POS];
 354:	85 e3       	ldi	r24, 0x35	; 53
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	20 91 68 00 	lds	r18, 0x0068
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
	
	if(firstCommingBitFlag == 0 && bit == ETX ){
 360:	80 91 79 00 	lds	r24, 0x0079
 364:	88 23       	and	r24, r24
 366:	99 f4       	brne	.+38     	; 0x38e <receiveArray+0x52>
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	81 33       	cpi	r24, 0x31	; 49
 36c:	81 f4       	brne	.+32     	; 0x38e <receiveArray+0x52>
		firstCommingBit = bit ;		
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	80 93 77 00 	sts	0x0077, r24
		firstCommingBitFlag = 1 ; 
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 79 00 	sts	0x0079, r24
		consecutiveCounterBuffer = consecutiveCounter ; 
 37a:	80 91 7b 00 	lds	r24, 0x007B
 37e:	80 93 7c 00 	sts	0x007C, r24
		PORTB = 0b11111000;
 382:	88 e3       	ldi	r24, 0x38	; 56
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	28 ef       	ldi	r18, 0xF8	; 248
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
		return ; 
 38c:	9a c0       	rjmp	.+308    	; 0x4c2 <__stack+0x63>
	}
	
	if(secondCommingBitFlag == 0 && bit == ETX && consecutiveCounterBuffer == (consecutiveCounter -1)  ){
 38e:	80 91 7a 00 	lds	r24, 0x007A
 392:	88 23       	and	r24, r24
 394:	d9 f4       	brne	.+54     	; 0x3cc <receiveArray+0x90>
 396:	8c 81       	ldd	r24, Y+4	; 0x04
 398:	81 33       	cpi	r24, 0x31	; 49
 39a:	c1 f4       	brne	.+48     	; 0x3cc <receiveArray+0x90>
 39c:	80 91 7c 00 	lds	r24, 0x007C
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	80 91 7b 00 	lds	r24, 0x007B
 3a8:	88 2f       	mov	r24, r24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	28 17       	cp	r18, r24
 3b0:	39 07       	cpc	r19, r25
 3b2:	61 f4       	brne	.+24     	; 0x3cc <receiveArray+0x90>
		secondCommingBit = bit ; 
 3b4:	8c 81       	ldd	r24, Y+4	; 0x04
 3b6:	80 93 78 00 	sts	0x0078, r24
		secondCommingBitFlag = 1; 
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 7a 00 	sts	0x007A, r24
		PORTB = 0b11111100;
 3c0:	88 e3       	ldi	r24, 0x38	; 56
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	2c ef       	ldi	r18, 0xFC	; 252
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
		return ;  		
 3ca:	7b c0       	rjmp	.+246    	; 0x4c2 <__stack+0x63>
	} 
	
	if(firstCommingBitFlag == 1 && secondCommingBitFlag == 0){
 3cc:	80 91 79 00 	lds	r24, 0x0079
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	91 f4       	brne	.+36     	; 0x3f8 <receiveArray+0xbc>
 3d4:	80 91 7a 00 	lds	r24, 0x007A
 3d8:	88 23       	and	r24, r24
 3da:	71 f4       	brne	.+28     	; 0x3f8 <receiveArray+0xbc>
		firstCommingBitFlag = 0 ; 
 3dc:	10 92 79 00 	sts	0x0079, r1
		secondCommingBitFlag = 0; 
 3e0:	10 92 7a 00 	sts	0x007A, r1
		consecutiveCounter = 0 ; 
 3e4:	10 92 7b 00 	sts	0x007B, r1
		consecutiveCounterBuffer = 0 ; 
 3e8:	10 92 7c 00 	sts	0x007C, r1
		PORTB = 0b10101010 ; 
 3ec:	88 e3       	ldi	r24, 0x38	; 56
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	2a ea       	ldi	r18, 0xAA	; 170
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
		return ; 
 3f6:	65 c0       	rjmp	.+202    	; 0x4c2 <__stack+0x63>
	}
	
	if( secondCommingBitFlag == 1 && firstCommingBitFlag == 1 ){
 3f8:	80 91 7a 00 	lds	r24, 0x007A
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	09 f0       	breq	.+2      	; 0x402 <receiveArray+0xc6>
 400:	5a c0       	rjmp	.+180    	; 0x4b6 <__stack+0x57>
 402:	80 91 79 00 	lds	r24, 0x0079
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	09 f0       	breq	.+2      	; 0x40c <receiveArray+0xd0>
 40a:	55 c0       	rjmp	.+170    	; 0x4b6 <__stack+0x57>
		PORTB = 0b11111110;
 40c:	88 e3       	ldi	r24, 0x38	; 56
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	2e ef       	ldi	r18, 0xFE	; 254
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
		for (int i = 0 ; i < INCOMMING_ARRAY_LENGTH-2 ; i ++ ){
 416:	1a 82       	std	Y+2, r1	; 0x02
 418:	19 82       	std	Y+1, r1	; 0x01
 41a:	12 c0       	rjmp	.+36     	; 0x440 <receiveArray+0x104>
			inCommingArray[i+1] = inCommingArray[i] ;		
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	9a 81       	ldd	r25, Y+2	; 0x02
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	29 81       	ldd	r18, Y+1	; 0x01
 424:	3a 81       	ldd	r19, Y+2	; 0x02
 426:	2b 59       	subi	r18, 0x9B	; 155
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	8b 59       	subi	r24, 0x9B	; 155
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
		return ; 
	}
	
	if( secondCommingBitFlag == 1 && firstCommingBitFlag == 1 ){
		PORTB = 0b11111110;
		for (int i = 0 ; i < INCOMMING_ARRAY_LENGTH-2 ; i ++ ){
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	9a 83       	std	Y+2, r25	; 0x02
 43e:	89 83       	std	Y+1, r24	; 0x01
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	85 30       	cpi	r24, 0x05	; 5
 446:	91 05       	cpc	r25, r1
 448:	4c f3       	brlt	.-46     	; 0x41c <receiveArray+0xe0>
			inCommingArray[i+1] = inCommingArray[i] ;		
		}
		
		inCommingArray[0] = bit ; 
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	80 93 65 00 	sts	0x0065, r24
		char crc  = 0 ;
 450:	1b 82       	std	Y+3, r1	; 0x03
	
		/*for(int i = 1 ; i < INCOMMING_ARRAY_LENGTH-2 ; i++){
			crc += inCommingArray[i] ; 
		}*/
		
		if(	inCommingArray[IN_STX1_POS] == STX && inCommingArray[IN_STX2_POS] == STX && consecutiveCounter == INCOMMING_ARRAY_LENGTH  ){
 452:	80 91 65 00 	lds	r24, 0x0065
 456:	80 33       	cpi	r24, 0x30	; 48
 458:	71 f5       	brne	.+92     	; 0x4b6 <__stack+0x57>
 45a:	80 91 66 00 	lds	r24, 0x0066
 45e:	80 33       	cpi	r24, 0x30	; 48
 460:	51 f5       	brne	.+84     	; 0x4b6 <__stack+0x57>
 462:	80 91 7b 00 	lds	r24, 0x007B
 466:	87 30       	cpi	r24, 0x07	; 7
 468:	31 f5       	brne	.+76     	; 0x4b6 <__stack+0x57>
			
			PORTB = inCommingArray[IN_CMD_POS]  ;
 46a:	88 e3       	ldi	r24, 0x38	; 56
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	20 91 68 00 	lds	r18, 0x0068
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
			consecutiveCounter = 0 ; 
 476:	10 92 7b 00 	sts	0x007B, r1
			if( inCommingArray[IN_CMD_POS] == START_CONVERSION_AND_TRANSMITING ){
 47a:	80 91 68 00 	lds	r24, 0x0068
 47e:	82 33       	cpi	r24, 0x32	; 50
 480:	61 f4       	brne	.+24     	; 0x49a <__stack+0x3b>
				PORTB = 0x0f;
 482:	88 e3       	ldi	r24, 0x38	; 56
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	2f e0       	ldi	r18, 0x0F	; 15
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
				startConversion(inCommingArray[IN_CMD_POS]);
 48c:	80 91 68 00 	lds	r24, 0x0068
 490:	0e 94 8d 02 	call	0x51a	; 0x51a <startConversion>
				clearCommand();
 494:	0e 94 68 02 	call	0x4d0	; 0x4d0 <clearCommand>
				return ; 
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <__stack+0x63>
			}
			if( inCommingArray[IN_CMD_POS] == STOP_CONVERSION_AND_TRANSMITING  ){
 49a:	80 91 68 00 	lds	r24, 0x0068
 49e:	83 33       	cpi	r24, 0x33	; 51
 4a0:	51 f4       	brne	.+20     	; 0x4b6 <__stack+0x57>
				PORTB = 0xf0;
 4a2:	88 e3       	ldi	r24, 0x38	; 56
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	20 ef       	ldi	r18, 0xF0	; 240
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
				stopConversion();
 4ac:	0e 94 a5 02 	call	0x54a	; 0x54a <stopConversion>
				clearCommand();
 4b0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <clearCommand>
				return ; 
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <__stack+0x63>
		} 
		
		
		
	}
	if(  consecutiveCounter >= INCOMMING_ARRAY_LENGTH ){
 4b6:	80 91 7b 00 	lds	r24, 0x007B
 4ba:	87 30       	cpi	r24, 0x07	; 7
 4bc:	10 f0       	brcs	.+4      	; 0x4c2 <__stack+0x63>
		clearCommand();
 4be:	0e 94 68 02 	call	0x4d0	; 0x4d0 <clearCommand>
	}
		
	
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <clearCommand>:
void clearCommand(void){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <clearCommand+0x6>
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
	firstCommingBitFlag = 0 ;
 4da:	10 92 79 00 	sts	0x0079, r1
	secondCommingBitFlag = 0;
 4de:	10 92 7a 00 	sts	0x007A, r1
	consecutiveCounter = 0 ;
 4e2:	10 92 7b 00 	sts	0x007B, r1
	consecutiveCounterBuffer = 0 ;
 4e6:	10 92 7c 00 	sts	0x007C, r1
	
	for(int i = 0 ; i > INCOMMING_ARRAY_LENGTH ; i ++){
 4ea:	1a 82       	std	Y+2, r1	; 0x02
 4ec:	19 82       	std	Y+1, r1	; 0x01
 4ee:	0b c0       	rjmp	.+22     	; 0x506 <clearCommand+0x36>
		inCommingArray[i] = 0 ;
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	9a 81       	ldd	r25, Y+2	; 0x02
 4f4:	8b 59       	subi	r24, 0x9B	; 155
 4f6:	9f 4f       	sbci	r25, 0xFF	; 255
 4f8:	fc 01       	movw	r30, r24
 4fa:	10 82       	st	Z, r1
	firstCommingBitFlag = 0 ;
	secondCommingBitFlag = 0;
	consecutiveCounter = 0 ;
	consecutiveCounterBuffer = 0 ;
	
	for(int i = 0 ; i > INCOMMING_ARRAY_LENGTH ; i ++){
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	9a 81       	ldd	r25, Y+2	; 0x02
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	9a 83       	std	Y+2, r25	; 0x02
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	9a 81       	ldd	r25, Y+2	; 0x02
 50a:	88 30       	cpi	r24, 0x08	; 8
 50c:	91 05       	cpc	r25, r1
 50e:	84 f7       	brge	.-32     	; 0x4f0 <clearCommand+0x20>
		inCommingArray[i] = 0 ;
	}
}
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <startConversion>:

void startConversion(char cmd){
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	1f 92       	push	r1
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
 524:	89 83       	std	Y+1, r24	; 0x01
	UCSRC |= (1<<URSEL);
 526:	80 e4       	ldi	r24, 0x40	; 64
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	20 e4       	ldi	r18, 0x40	; 64
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	20 68       	ori	r18, 0x80	; 128
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
	startFlag = 1 ; 
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 93 62 00 	sts	0x0062, r24
	send();
 53e:	0e 94 b7 02 	call	0x56e	; 0x56e <send>
}
 542:	0f 90       	pop	r0
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <stopConversion>:

void stopConversion(void){
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
	UCSRB &=~(1<<UDRIE);
 552:	8a e2       	ldi	r24, 0x2A	; 42
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	2a e2       	ldi	r18, 0x2A	; 42
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	f9 01       	movw	r30, r18
 55c:	20 81       	ld	r18, Z
 55e:	2f 7d       	andi	r18, 0xDF	; 223
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
	startFlag = 0 ; 
 564:	10 92 62 00 	sts	0x0062, r1
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <send>:

void send(void)
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
	if( acdConverted == 1 )
 576:	80 91 76 00 	lds	r24, 0x0076
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	99 f5       	brne	.+102    	; 0x5e4 <send+0x76>
	{
		if(counter < OUT_COMMING_ARRAY_LENGTH){
 57e:	80 91 60 00 	lds	r24, 0x0060
 582:	90 91 61 00 	lds	r25, 0x0061
 586:	8a 30       	cpi	r24, 0x0A	; 10
 588:	91 05       	cpc	r25, r1
 58a:	fc f4       	brge	.+62     	; 0x5ca <send+0x5c>
			UCSRB |=(1<<TXCIE);
 58c:	8a e2       	ldi	r24, 0x2A	; 42
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	2a e2       	ldi	r18, 0x2A	; 42
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	f9 01       	movw	r30, r18
 596:	20 81       	ld	r18, Z
 598:	20 64       	ori	r18, 0x40	; 64
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
			UDR = outCommingArray[counter] ;			
 59e:	8c e2       	ldi	r24, 0x2C	; 44
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	20 91 60 00 	lds	r18, 0x0060
 5a6:	30 91 61 00 	lds	r19, 0x0061
 5aa:	24 59       	subi	r18, 0x94	; 148
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	f9 01       	movw	r30, r18
 5b0:	20 81       	ld	r18, Z
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
			counter++;
 5b6:	80 91 60 00 	lds	r24, 0x0060
 5ba:	90 91 61 00 	lds	r25, 0x0061
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	90 93 61 00 	sts	0x0061, r25
 5c4:	80 93 60 00 	sts	0x0060, r24
 5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <send+0x76>
		} else {
			UCSRB &=~(1<<TXCIE);
 5ca:	8a e2       	ldi	r24, 0x2A	; 42
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	2a e2       	ldi	r18, 0x2A	; 42
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	f9 01       	movw	r30, r18
 5d4:	20 81       	ld	r18, Z
 5d6:	2f 7b       	andi	r18, 0xBF	; 191
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
			counter = 0;
 5dc:	10 92 61 00 	sts	0x0061, r1
 5e0:	10 92 60 00 	sts	0x0060, r1
		}
	}
}
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <ping>:

void ping(void){
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
	UCSRC |= (1<<URSEL);
 5f2:	80 e4       	ldi	r24, 0x40	; 64
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	20 e4       	ldi	r18, 0x40	; 64
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	f9 01       	movw	r30, r18
 5fc:	20 81       	ld	r18, Z
 5fe:	20 68       	ori	r18, 0x80	; 128
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
	UDR = 0xff;
 604:	8c e2       	ldi	r24, 0x2C	; 44
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
	UCSRC &= ~(1<<URSEL);
 60e:	80 e4       	ldi	r24, 0x40	; 64
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	20 e4       	ldi	r18, 0x40	; 64
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	f9 01       	movw	r30, r18
 618:	20 81       	ld	r18, Z
 61a:	2f 77       	andi	r18, 0x7F	; 127
 61c:	fc 01       	movw	r30, r24
 61e:	20 83       	st	Z, r18
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <main>:




////////////////////////////////////////////////////////////////////////////////////////////////////////////     MAIN    //////
int main(void){
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
	
	_construct();	
 62e:	0e 94 20 03 	call	0x640	; 0x640 <_construct>
	sei();
 632:	78 94       	sei
	ping();
 634:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ping>
	initArray(OUT_COMMING_ARRAY_ALIAS);
 638:	85 e0       	ldi	r24, 0x05	; 5
 63a:	0e 94 85 01 	call	0x30a	; 0x30a <initArray>
	
    while(1) 
	{ 	
		;	
    }
 63e:	ff cf       	rjmp	.-2      	; 0x63e <main+0x18>

00000640 <_construct>:





void _construct(void){
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
	_portInit   ();
 648:	0e 94 2f 03 	call	0x65e	; 0x65e <_portInit>
	_uartInit   ();
 64c:	0e 94 94 03 	call	0x728	; 0x728 <_uartInit>
	_timer1Init ();
 650:	0e 94 76 03 	call	0x6ec	; 0x6ec <_timer1Init>
	//_externInterruptInit();
	_ADCinit    ();
 654:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ADCinit>
}
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <_portInit>:

void _portInit(void){
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
	//adc port
	PORTA = 0X00;
 666:	8b e3       	ldi	r24, 0x3B	; 59
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	fc 01       	movw	r30, r24
 66c:	10 82       	st	Z, r1
	DDRA = 0XFF;
 66e:	8a e3       	ldi	r24, 0x3A	; 58
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	2f ef       	ldi	r18, 0xFF	; 255
 674:	fc 01       	movw	r30, r24
 676:	20 83       	st	Z, r18
	
	//uart port
	PORTD = 0b00111100;
 678:	82 e3       	ldi	r24, 0x32	; 50
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	2c e3       	ldi	r18, 0x3C	; 60
 67e:	fc 01       	movw	r30, r24
 680:	20 83       	st	Z, r18
	DDRD  = 0b11111111;
 682:	81 e3       	ldi	r24, 0x31	; 49
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	2f ef       	ldi	r18, 0xFF	; 255
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
	
	//led port
	PORTB = firstCommingBitFlag;
 68c:	88 e3       	ldi	r24, 0x38	; 56
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	20 91 79 00 	lds	r18, 0x0079
 694:	fc 01       	movw	r30, r24
 696:	20 83       	st	Z, r18
	DDRB = 0xFF;
 698:	87 e3       	ldi	r24, 0x37	; 55
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <_ADCinit>:

void _ADCinit(void){	
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
	ADMUX  |= ( 1<<REFS1 ) | ( 1<<REFS0 ) ;//Internal 2.56V Voltage Reference with external capacitor at AREF pin
 6b0:	87 e2       	ldi	r24, 0x27	; 39
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	27 e2       	ldi	r18, 0x27	; 39
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	f9 01       	movw	r30, r18
 6ba:	20 81       	ld	r18, Z
 6bc:	20 6c       	ori	r18, 0xC0	; 192
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18
	ADCSRA |= ( 1<<ADEN  ) | ( 1<<ADSC  ) | ( 1<<ADIE ) | ( 1<<ADPS2 ) | ( 1<<ADPS1 ) | ( 1 << ADIF );//Division Factor 64 frequency 125000Hz	
 6c2:	86 e2       	ldi	r24, 0x26	; 38
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	26 e2       	ldi	r18, 0x26	; 38
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	f9 01       	movw	r30, r18
 6cc:	20 81       	ld	r18, Z
 6ce:	2e 6d       	ori	r18, 0xDE	; 222
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18
	SFIOR  |= ( 1<<ADTS1 ) | ( 1<<ADTS0 ) ;// trigger Timer/Counter0 Overflow
 6d4:	80 e5       	ldi	r24, 0x50	; 80
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	20 e5       	ldi	r18, 0x50	; 80
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	20 81       	ld	r18, Z
 6e0:	20 66       	ori	r18, 0x60	; 96
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <_timer1Init>:

void _timer1Init(void){
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= ( 1<<CS01)|(1<<CS00);//division factor 64
 6f4:	83 e5       	ldi	r24, 0x53	; 83
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	23 e5       	ldi	r18, 0x53	; 83
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	f9 01       	movw	r30, r18
 6fe:	20 81       	ld	r18, Z
 700:	23 60       	ori	r18, 0x03	; 3
 702:	fc 01       	movw	r30, r24
 704:	20 83       	st	Z, r18
	TIMSK |= ( 1<<TOIE0) ;
 706:	89 e5       	ldi	r24, 0x59	; 89
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	29 e5       	ldi	r18, 0x59	; 89
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	f9 01       	movw	r30, r18
 710:	20 81       	ld	r18, Z
 712:	21 60       	ori	r18, 0x01	; 1
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
	OCR0 = 255 ; 
 718:	8c e5       	ldi	r24, 0x5C	; 92
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	2f ef       	ldi	r18, 0xFF	; 255
 71e:	fc 01       	movw	r30, r24
 720:	20 83       	st	Z, r18
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <_uartInit>:

void _uartInit(void){
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	00 d0       	rcall	.+0      	; 0x72e <_uartInit+0x6>
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
	int baud = 12 ;
 732:	8c e0       	ldi	r24, 0x0C	; 12
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	9a 83       	std	Y+2, r25	; 0x02
 738:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (unsigned char)(baud>>8);
 73a:	80 e4       	ldi	r24, 0x40	; 64
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	29 81       	ldd	r18, Y+1	; 0x01
 740:	3a 81       	ldd	r19, Y+2	; 0x02
 742:	23 2f       	mov	r18, r19
 744:	33 0f       	add	r19, r19
 746:	33 0b       	sbc	r19, r19
 748:	fc 01       	movw	r30, r24
 74a:	20 83       	st	Z, r18
	UBRRL = (unsigned char) baud;
 74c:	89 e2       	ldi	r24, 0x29	; 41
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	29 81       	ldd	r18, Y+1	; 0x01
 752:	fc 01       	movw	r30, r24
 754:	20 83       	st	Z, r18
	UCSRB |= (1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN)|(1<<RXB8)|(1<<TXB8)|(0<<UDRIE) ;
 756:	8a e2       	ldi	r24, 0x2A	; 42
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	2a e2       	ldi	r18, 0x2A	; 42
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	f9 01       	movw	r30, r18
 760:	20 81       	ld	r18, Z
 762:	2b 6d       	ori	r18, 0xDB	; 219
 764:	fc 01       	movw	r30, r24
 766:	20 83       	st	Z, r18
	UCSRC |= (1<<URSEL)|(0<<USBS) |(1<< UCSZ1)|(1<< UCSZ0);//
 768:	80 e4       	ldi	r24, 0x40	; 64
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	20 e4       	ldi	r18, 0x40	; 64
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	f9 01       	movw	r30, r18
 772:	20 81       	ld	r18, Z
 774:	26 68       	ori	r18, 0x86	; 134
 776:	fc 01       	movw	r30, r24
 778:	20 83       	st	Z, r18
}
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
