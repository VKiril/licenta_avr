
licenta iopta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  00000406  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b6b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000045e  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000015d  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000026f  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000028c  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e1  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004e0  00000000  00000000  000018e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a8  00000000  00000000  00001dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_11>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  74:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:

ISR(ADC_vect){
	adcConversion();
}

ISR(TIMER0_OVF_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
	//
}
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <__vector_2>:
ISR(INT0_vect){
	PORTB = 0xFF;
	send();
}

ISR(INT1_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
	PORTB = 0x00;
  9a:	18 ba       	out	0x18, r1	; 24
	counter = 0 ;
  9c:	10 92 72 00 	sts	0x0072, r1
}
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <stopConversion>:
	startFlag = 1 ; 
	send();
}

void stopConversion(void){
	UCSRB &=~(1<<UDRIE);
  aa:	55 98       	cbi	0x0a, 5	; 10
	startFlag = 0 ; 
  ac:	10 92 71 00 	sts	0x0071, r1
  b0:	08 95       	ret

000000b2 <send>:
}

void send(void){
	if(counter < OUT_COMMING_ARRAY_LENGTH){
  b2:	80 91 72 00 	lds	r24, 0x0072
  b6:	89 30       	cpi	r24, 0x09	; 9
  b8:	80 f4       	brcc	.+32     	; 0xda <send+0x28>
  ba:	e0 e6       	ldi	r30, 0x60	; 96
  bc:	f0 e0       	ldi	r31, 0x00	; 0
void stopConversion(void){
	UCSRB &=~(1<<UDRIE);
	startFlag = 0 ; 
}

void send(void){
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	90 e0       	ldi	r25, 0x00	; 0
	if(counter < OUT_COMMING_ARRAY_LENGTH){
		for(char i = 0 ; i < OUT_COMMING_ARRAY_LENGTH ; i++ ){
			UDR = outCommingArray[i] ;
  c2:	21 91       	ld	r18, Z+
  c4:	2c b9       	out	0x0c, r18	; 12
	startFlag = 0 ; 
}

void send(void){
	if(counter < OUT_COMMING_ARRAY_LENGTH){
		for(char i = 0 ; i < OUT_COMMING_ARRAY_LENGTH ; i++ ){
  c6:	e8 17       	cp	r30, r24
  c8:	f9 07       	cpc	r31, r25
  ca:	d9 f7       	brne	.-10     	; 0xc2 <send+0x10>
			UDR = outCommingArray[i] ;
		}
		
		UCSRB |=(1<<UDRIE);
  cc:	55 9a       	sbi	0x0a, 5	; 10
		counter++;
  ce:	80 91 72 00 	lds	r24, 0x0072
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 72 00 	sts	0x0072, r24
  d8:	08 95       	ret
	} else {
		UCSRB &=~(1<<UDRIE);
  da:	55 98       	cbi	0x0a, 5	; 10
		counter = 0;
  dc:	10 92 72 00 	sts	0x0072, r1
  e0:	08 95       	ret

000000e2 <startConversion>:
		}
	}
}

void startConversion(char cmd){
	UCSRC |= (1<<URSEL);
  e2:	80 b5       	in	r24, 0x20	; 32
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 bd       	out	0x20, r24	; 32
	startFlag = 1 ; 
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 71 00 	sts	0x0071, r24
	send();
  ee:	0e 94 59 00 	call	0xb2	; 0xb2 <send>
  f2:	08 95       	ret

000000f4 <receiveArray>:
	} 
}

void receiveArray(char bit){
	for (char i = 0 ; i < INCOMMING_ARRAY_LENGTH-1 ; i ++ ){
		inCommingArray[i] = inCommingArray[i+1] ;		
  f4:	ea e6       	ldi	r30, 0x6A	; 106
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	90 93 69 00 	sts	0x0069, r25
  fe:	ab e6       	ldi	r26, 0x6B	; 107
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	2c 91       	ld	r18, X
 104:	20 83       	st	Z, r18
 106:	ec e6       	ldi	r30, 0x6C	; 108
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	9c 93       	st	X, r25
 10e:	ad e6       	ldi	r26, 0x6D	; 109
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	3c 91       	ld	r19, X
 114:	30 83       	st	Z, r19
 116:	ee e6       	ldi	r30, 0x6E	; 110
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	30 81       	ld	r19, Z
 11c:	3c 93       	st	X, r19
	}
	inCommingArray[INCOMMING_ARRAY_LENGTH-1] = bit ; 
 11e:	80 83       	st	Z, r24
	char crc  = 0 ;
	
	for(char i = 1 ; i < INCOMMING_ARRAY_LENGTH-2 ; i++){
		crc += inCommingArray[i] ; 
 120:	39 2f       	mov	r19, r25
 122:	92 0f       	add	r25, r18
	}
	
	if(crc == inCommingArray[IN_CRC_POS] && inCommingArray[IN_STX_POS] == STX && inCommingArray[IN_ETX1_POS] == ETX && inCommingArray[IN_ETX2_POS] == ETX ){
 124:	a9 f4       	brne	.+42     	; 0x150 <receiveArray+0x5c>
 126:	90 91 69 00 	lds	r25, 0x0069
 12a:	92 30       	cpi	r25, 0x02	; 2
 12c:	89 f4       	brne	.+34     	; 0x150 <receiveArray+0x5c>
 12e:	90 91 6d 00 	lds	r25, 0x006D
 132:	93 30       	cpi	r25, 0x03	; 3
 134:	69 f4       	brne	.+26     	; 0x150 <receiveArray+0x5c>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	59 f4       	brne	.+22     	; 0x150 <receiveArray+0x5c>
		if( inCommingArray[IN_CMD_POS] == START_CONVERSION_AND_TRANSMITING ){
 13a:	36 30       	cpi	r19, 0x06	; 6
 13c:	19 f4       	brne	.+6      	; 0x144 <receiveArray+0x50>
			startConversion(inCommingArray[IN_CMD_POS]);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 71 00 	call	0xe2	; 0xe2 <startConversion>
		} 
		if( inCommingArray[IN_CMD_POS] == STOP_CONVERSION_AND_TRANSMITING  ){
 144:	80 91 6b 00 	lds	r24, 0x006B
 148:	87 30       	cpi	r24, 0x07	; 7
 14a:	11 f4       	brne	.+4      	; 0x150 <receiveArray+0x5c>
			stopConversion();
 14c:	0e 94 55 00 	call	0xaa	; 0xaa <stopConversion>
 150:	08 95       	ret

00000152 <__vector_11>:

ISR(USART_UDRE_vect){
	send();
}

ISR(USART_RXC_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	receiveArray(UDR);
 174:	8c b1       	in	r24, 0x0c	; 12
 176:	0e 94 7a 00 	call	0xf4	; 0xf4 <receiveArray>
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <adcConversion>:

void adcConversion(void){
	
	lowerBit  = ADCL ;
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	80 93 6f 00 	sts	0x006F, r24
	higgerBit = ADCH;
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	80 93 70 00 	sts	0x0070, r24
	DDRC = 0XFF;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	84 bb       	out	0x14, r24	; 20
	if(startFlag == 1){
 1ac:	80 91 71 00 	lds	r24, 0x0071
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	f1 f4       	brne	.+60     	; 0x1f0 <adcConversion+0x54>
		PORTC=0b11111110;
 1b4:	8e ef       	ldi	r24, 0xFE	; 254
 1b6:	85 bb       	out	0x15, r24	; 21
		
		int crc = lowerBit + higgerBit + inCommingArray[IN_CMD_POS] + OUT_COMMING_ARRAY_LENGTH  ;
 1b8:	30 91 6f 00 	lds	r19, 0x006F
 1bc:	80 91 70 00 	lds	r24, 0x0070
 1c0:	20 91 6b 00 	lds	r18, 0x006B
		outCommingArray[OUT_LENGTH_BIT_POS] = OUT_COMMING_ARRAY_LENGTH ;
 1c4:	99 e0       	ldi	r25, 0x09	; 9
 1c6:	90 93 61 00 	sts	0x0061, r25
		outCommingArray[OUT_CMD_POS] = inCommingArray[IN_CMD_POS] ;
 1ca:	20 93 62 00 	sts	0x0062, r18
		outCommingArray[OUT_BIT0_POS] = lowerBit ;
 1ce:	30 93 63 00 	sts	0x0063, r19
		outCommingArray[OUT_BIT1_POS] = higgerBit ;
 1d2:	80 93 64 00 	sts	0x0064, r24
		outCommingArray[OUT_CRCH_POS] = (char) crc << 8 ;
 1d6:	10 92 66 00 	sts	0x0066, r1
	higgerBit = ADCH;
	DDRC = 0XFF;
	if(startFlag == 1){
		PORTC=0b11111110;
		
		int crc = lowerBit + higgerBit + inCommingArray[IN_CMD_POS] + OUT_COMMING_ARRAY_LENGTH  ;
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	83 0f       	add	r24, r19
 1de:	91 1d       	adc	r25, r1
 1e0:	82 0f       	add	r24, r18
 1e2:	91 1d       	adc	r25, r1
 1e4:	09 96       	adiw	r24, 0x09	; 9
		outCommingArray[OUT_LENGTH_BIT_POS] = OUT_COMMING_ARRAY_LENGTH ;
		outCommingArray[OUT_CMD_POS] = inCommingArray[IN_CMD_POS] ;
		outCommingArray[OUT_BIT0_POS] = lowerBit ;
		outCommingArray[OUT_BIT1_POS] = higgerBit ;
		outCommingArray[OUT_CRCH_POS] = (char) crc << 8 ;
		outCommingArray[OUT_CRCL_POS] = (char) crc ;
 1e6:	80 93 65 00 	sts	0x0065, r24
		send();
 1ea:	0e 94 59 00 	call	0xb2	; 0xb2 <send>
 1ee:	08 95       	ret
	} else {
		PORTC=0b00000001;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	08 95       	ret

000001f6 <__vector_14>:
void stopConversion(void);
void startConversion(char);

void initArray(char );

ISR(ADC_vect){
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	adcConversion();
 218:	0e 94 ce 00 	call	0x19c	; 0x19c <adcConversion>
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <__vector_12>:
ISR(INT1_vect){
	PORTB = 0x00;
	counter = 0 ;
}

ISR(USART_UDRE_vect){
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	2f 93       	push	r18
 24a:	3f 93       	push	r19
 24c:	4f 93       	push	r20
 24e:	5f 93       	push	r21
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
	send();
 260:	0e 94 59 00 	call	0xb2	; 0xb2 <send>
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_1>:

ISR(TIMER0_OVF_vect){
	//
}

ISR(INT0_vect){
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	5f 93       	push	r21
 298:	6f 93       	push	r22
 29a:	7f 93       	push	r23
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	af 93       	push	r26
 2a2:	bf 93       	push	r27
 2a4:	ef 93       	push	r30
 2a6:	ff 93       	push	r31
	PORTB = 0xFF;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	88 bb       	out	0x18, r24	; 24
	send();
 2ac:	0e 94 59 00 	call	0xb2	; 0xb2 <send>
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <pingPulse>:
		counter = 0;
	}
}

void pingPulse(void){
	UCSRC |= (1<<URSEL);
 2d2:	80 b5       	in	r24, 0x20	; 32
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	80 bd       	out	0x20, r24	; 32
	UDR = 0x0f;
 2d8:	8f e0       	ldi	r24, 0x0F	; 15
 2da:	8c b9       	out	0x0c, r24	; 12
	UCSRC &= ~(1<<URSEL);
 2dc:	80 b5       	in	r24, 0x20	; 32
 2de:	8f 77       	andi	r24, 0x7F	; 127
 2e0:	80 bd       	out	0x20, r24	; 32
 2e2:	08 95       	ret

000002e4 <_portInit>:



void _portInit(void){
	//adc port
	PORTA = 0X00;
 2e4:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0XFF;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	8a bb       	out	0x1a, r24	; 26
	
	//uart port
	PORTD = 0b00111100;
 2ea:	9c e3       	ldi	r25, 0x3C	; 60
 2ec:	92 bb       	out	0x12, r25	; 18
	DDRD  = 0b11111111;
 2ee:	81 bb       	out	0x11, r24	; 17
	
	//led port
	PORTB = 0x00;
 2f0:	18 ba       	out	0x18, r1	; 24
	DDRB = 0xFF;
 2f2:	87 bb       	out	0x17, r24	; 23
 2f4:	08 95       	ret

000002f6 <_ADCinit>:
}

void _ADCinit(void){
	
	
	ADMUX  |= ( 1<<REFS1 ) | ( 1<<REFS0 );//Internal 2.56V Voltage Reference with external capacitor at AREF pin
 2f6:	87 b1       	in	r24, 0x07	; 7
 2f8:	80 6c       	ori	r24, 0xC0	; 192
 2fa:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= ( 1<<ADEN  ) | ( 1<<ADSC  ) | ( 1<<ADIF ) | ( 1<<ADIE ) | ( 1<<ADPS2 ) | ( 1<<ADPS1 );//Division Factor 64 frequency 125000Hz
 2fc:	86 b1       	in	r24, 0x06	; 6
 2fe:	8e 6d       	ori	r24, 0xDE	; 222
 300:	86 b9       	out	0x06, r24	; 6
	
	SFIOR  |= ( 1<<ADTS2 );// trigger Timer/Counter0 Overflow
 302:	80 b7       	in	r24, 0x30	; 48
 304:	80 68       	ori	r24, 0x80	; 128
 306:	80 bf       	out	0x30, r24	; 48
 308:	08 95       	ret

0000030a <_timer1Init>:
}

void _timer1Init(void){
	TCCR0 |= ( 1<<CS01)|(1<<CS00);//division factor 64
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	83 60       	ori	r24, 0x03	; 3
 30e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= ( 1<<TOIE0) ;
 310:	89 b7       	in	r24, 0x39	; 57
 312:	81 60       	ori	r24, 0x01	; 1
 314:	89 bf       	out	0x39, r24	; 57
 316:	08 95       	ret

00000318 <_uartInit>:
}

void _uartInit(void){
	char baud = 12 ;
	UBRRH = (unsigned char)(baud>>8);
 318:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baud;
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	89 b9       	out	0x09, r24	; 9
	//UBRRH = 0x00;
	//UBRRL = 0x05;//0b00000101

	//Receive Data Bit 8
	//TXB8: Transmit Data Bit 8
	UCSRB |=(1<<RXCIE)|(1<<TXCIE)|(1<<RXEN)|(1<<TXEN)|(1<<RXB8)|(1<<TXB8)|(1<<UDRIE);
 31e:	8a b1       	in	r24, 0x0a	; 10
 320:	8b 6f       	ori	r24, 0xFB	; 251
 322:	8a b9       	out	0x0a, r24	; 10
	UCSRC &= ~(1<<URSEL);
 324:	80 b5       	in	r24, 0x20	; 32
 326:	8f 77       	andi	r24, 0x7F	; 127
 328:	80 bd       	out	0x20, r24	; 32
 32a:	08 95       	ret

0000032c <_externInterruptInit>:
}

void _externInterruptInit(void){
	//The falling edge of INT0 generates an interrupt request.
	MCUCR |= (1<<ISC01);
 32c:	85 b7       	in	r24, 0x35	; 53
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	85 bf       	out	0x35, r24	; 53
	GICR  |= (1<<INT0) ;
 332:	8b b7       	in	r24, 0x3b	; 59
 334:	80 64       	ori	r24, 0x40	; 64
 336:	8b bf       	out	0x3b, r24	; 59
	GIFR  |= (1<<INTF0) ;
 338:	8a b7       	in	r24, 0x3a	; 58
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	8a bf       	out	0x3a, r24	; 58

	MCUCR |= ( 1 << ISC11 ) ;//falling edge front
 33e:	85 b7       	in	r24, 0x35	; 53
 340:	88 60       	ori	r24, 0x08	; 8
 342:	85 bf       	out	0x35, r24	; 53
	GICR  |= ( 1 << INT1  ) ;//int1
 344:	8b b7       	in	r24, 0x3b	; 59
 346:	80 68       	ori	r24, 0x80	; 128
 348:	8b bf       	out	0x3b, r24	; 59
	GIFR  |= ( 1 << INTF1 ) ;//int1_vect
 34a:	8a b7       	in	r24, 0x3a	; 58
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	8a bf       	out	0x3a, r24	; 58
 350:	08 95       	ret

00000352 <main>:
}

int main(void){
	
	//_construct();
	_portInit   ();	
 352:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_portInit>
	_uartInit   ();
 356:	0e 94 8c 01 	call	0x318	; 0x318 <_uartInit>
	_timer1Init ();
 35a:	0e 94 85 01 	call	0x30a	; 0x30a <_timer1Init>
	_externInterruptInit();	
 35e:	0e 94 96 01 	call	0x32c	; 0x32c <_externInterruptInit>
	_ADCinit    ();
 362:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ADCinit>
	
	sei();
 366:	78 94       	sei
	pingPulse();
 368:	0e 94 69 01 	call	0x2d2	; 0x2d2 <pingPulse>
 36c:	ff cf       	rjmp	.-2      	; 0x36c <main+0x1a>

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
